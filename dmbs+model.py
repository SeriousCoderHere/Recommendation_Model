# Creating Tables

import mysql.connector as c

# Establish the connection to SQL
myconn = c.connect(host="localhost", user="root", password="1234")
mycur = myconn.cursor()

# Create the database if it doesn't exist
mycur.execute("CREATE DATABASE IF NOT EXISTS Prod_Reccomend_Sys")

# Connect to Database now after Database has been created
myconn = c.connect(host="localhost", user="root", password="1234", database="Prod_Reccomend_Sys")
mycur = myconn.cursor()

# Create User Login table
def createtable(uID,name,email_id,contact_no,password):
    query1 = '''CREATE TABLE IF NOT EXISTS User_Login (
        uID INT PRIMARY KEY,
        name VARCHAR(30),
        email_id VARCHAR(20),
        contact_no CHAR(14),
        password VARCHAR(15)
    )'''
    mycur.execute(query1)

# Create Content Store table that Stores Data Which Is extracted By Internet
def createcontenttable():
    query2 = '''CREATE TABLE IF NOT EXISTS Content_Store (
        ContentID INT PRIMARY KEY,
        Type VARCHAR(30),
        Title VARCHAR(100),
        Genre VARCHAR(100),
        Description TEXT,
        WebRatings FLOAT
    )'''
    mycur.execute(query2)

""" Now Create the ML RECCOMENDATION table ( when ML Model Is Trained and Provided with data from contentTable Output Generated by
    by that Model is stored in this Table later from which required output is given to user
"""
def 
query3 = '''CREATE TABLE IF NOT EXISTS ML_RECCOMENDATION (
    Reccomendation_ID INT PRIMARY KEY,
    uID INT,
    ContentID INT,
    Score FLOAT,
    Description TEXT,
    FOREIGN KEY (uID) REFERENCES User_Login(uID),
    FOREIGN KEY (ContentID) REFERENCES Content_Store(ContentID)
)'''
mycur.execute(query3)

# Create the User Reviews table ( when User Has received output He/she will be Provided with review option to Rate ML Model and suggest changes 
query4 = '''CREATE TABLE IF NOT EXISTS User_Reviews (
    Review_ID INT PRIMARY KEY,
    uID INT,
    ContentID INT,
    Ratings INT,
    Comment TEXT,
    FOREIGN KEY (uID) REFERENCES User_Login(uID),
    FOREIGN KEY (ContentID) REFERENCES Content_Store(ContentID)
)'''
mycur.execute(query4)

# Close the cursor and connection
mycur.close()
myconn.close()

# Login Backend Code 

import mysql.connector as c
from flask import request

# Database connection
myconn = c.connect(host="localhost", user="root", password="1234", database="Prod_Reccomend_Sys")
mycur = myconn.cursor()

def register_acc():
    try:
        data = request.json  # Get the JSON data from the request
        uID = int(data.get('uID'))
        Name = data.get('Name')
        Password = data.get('Password')
        Email_ID = data.get('Email_ID')
        Contact_No = data.get('Contact_No')

        mycur.execute("SELECT * FROM User_Login WHERE uID=%s", (uID,))
        account = mycur.fetchone()

        if account is None:
            sql = "INSERT INTO User_Login (uID, Name, Password, Email_ID, Contact_No) VALUES (%s, %s, %s, %s, %s)"
            val = (uID, Name, Password, Email_ID, Contact_No)
            mycur.execute(sql, val)
            myconn.commit()
            return {"message": "Account Created Successfully!"}, 201
        else:
            return {"message": "Account already exists"}, 409  # Conflict status code
    except Exception as e:
        return {"message": f"An error occurred: {str(e)}"}, 500  # Internal server error

def login_acc():
    try:
        data = request.json  # Get the JSON data from the request
        uID = int(data.get('uID'))
        Password = data.get('Password')

        mycur.execute("SELECT * FROM User_Login WHERE uID=%s", (uID,))
        account = mycur.fetchone()

        if account is not None:
            if account[4] == Password:  # Assuming Password is the fifth column (index 4)
                return {"message": f"You Have Been Logged In: {account[1]}"}, 200  # OK status code
            else:
                return {"message": "Wrong Password"}, 401  # Unauthorized status code
        else:
            return {"message": "Account does not exist"}, 404  # Not found status code
    except Exception as e:
        return {"message": f"An error occurred: {str(e)}"}, 500  # Internal server error

#AI Model

import pandas as pd
import numpy as np
import mysql.connector as c
from sklearn.neighbors import NearestNeighbors

# Database connection
myconn = c.connect(host="localhost", user="root", password="1234", database="Prod_Reccomend_Sys")
mycur = myconn.cursor()

# Fetch data from the Content_Store and User_Login tables
mycur.execute("SELECT * FROM Content_Store")
content_data = mycur.fetchall()
mycur.execute("SELECT * FROM User_Login")
user_data = mycur.fetchall()

# Convert to DataFrame
content_df = pd.DataFrame(content_data, columns=['ContentID', 'Type', 'Title', 'Genre', 'Description', 'WebRatings'])
user_df = pd.DataFrame(user_data, columns=['uID', 'Name', 'Password', 'Email_ID', 'Contact_No'])

# Simulate user ratings (1-5 scale)
num_users = user_df.shape[0]
num_content = content_df.shape[0]

# Create a random ratings matrix
np.random.seed(42)  # For reproducibility
ratings_matrix = np.random.randint(1, 6, size=(num_users, num_content))  # Random ratings between 1 and 5

# Create a user-item matrix DataFrame
user_item_matrix = pd.DataFrame(ratings_matrix, index=user_df['uID'], columns=content_df['ContentID'])

# Prepare data for KNN
X = user_item_matrix.values

# Create and train the KNN model
knn_model = NearestNeighbors(n_neighbors=5, algorithm='brute', metric='cosine')
knn_model.fit(X)

# Function to recommend content for a user
def recommend_content(user_id):
    if user_id not in user_item_matrix.index:
        return "User  ID not found."
    
    user_index = user_item_matrix.index.get_loc(user_id)
    distances, indices = knn_model.kneighbors(X[user_index].reshape(1, -1), n_neighbors=6)  # 6 to include the user themselves
    recommended_indices = indices.flatten()[1:]  # Exclude the first index (the user themselves)
    recommended_content_ids = user_item_matrix.columns[recommended_indices]
    return content_df[content_df['ContentID'].isin(recommended_content_ids)]
